import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Users, MapPin, DollarSign, Package, Search, Star, Leaf } from "lucide-react";
import { useState } from "react";

interface Grower {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  isActive: boolean;
  createdAt: string;
  farm?: {
    id: number;
    name: string;
    city: string;
    state: string;
    isOrganic: boolean;
    rating: string;
    reviewCount: number;
    listingsCount: number;
    totalRevenue: number;
  };
}

export default function GrowersTab() {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [typeFilter, setTypeFilter] = useState("all");

  const { data: growers, isLoading } = useQuery<Grower[]>({
    queryKey: ["/api/admin/growers"],
  });

  const filteredGrowers = growers?.filter(grower => {
    const fullName = `${grower.firstName} ${grower.lastName}`.toLowerCase();
    const farmName = grower.farm?.name?.toLowerCase() || "";
    const matchesSearch = fullName.includes(searchTerm.toLowerCase()) ||
                         grower.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         farmName.includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === "all" ||
                         (statusFilter === "active" && grower.isActive) ||
                         (statusFilter === "inactive" && !grower.isActive);
    
    const matchesType = typeFilter === "all" ||
                       (typeFilter === "organic" && grower.farm?.isOrganic) ||
                       (typeFilter === "conventional" && !grower.farm?.isOrganic) ||
                       (typeFilter === "no_farm" && !grower.farm);
    
    return matchesSearch && matchesStatus && matchesType;
  });

  const totalRevenue = growers?.reduce((sum, grower) => sum + (grower.farm?.totalRevenue || 0), 0) || 0;
  const avgRating = growers?.filter(g => g.farm?.rating).reduce((sum, g) => sum + parseFloat(g.farm!.rating), 0) / (growers?.filter(g => g.farm?.rating).length || 1) || 0;
  const organicCount = growers?.filter(g => g.farm?.isOrganic).length || 0;

  return (
    <div className="space-y-6">
      {/* Summary Cards */}
      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Growers</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{growers?.length || 0}</div>
            <p className="text-xs text-muted-foreground">
              {growers?.filter(g => g.isActive).length || 0} active
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">${totalRevenue.toFixed(2)}</div>
            <p className="text-xs text-muted-foreground">
              Generated by growers
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
            <Star className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{avgRating.toFixed(1)}</div>
            <p className="text-xs text-muted-foreground">
              Customer satisfaction
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Organic Growers</CardTitle>
            <Leaf className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{organicCount}</div>
            <p className="text-xs text-muted-foreground">
              {growers?.length ? Math.round((organicCount / growers.length) * 100) : 0}% of all growers
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Table */}
      <Card>
        <CardHeader>
          <CardTitle className="luxury-heading">All Flower Growers</CardTitle>
          <CardDescription>Monitor grower performance and farm details</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex gap-4 mb-6">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search growers, farms, or email..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="All Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="inactive">Inactive</SelectItem>
              </SelectContent>
            </Select>
            <Select value={typeFilter} onValueChange={setTypeFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="All Types" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="organic">Organic</SelectItem>
                <SelectItem value="conventional">Conventional</SelectItem>
                <SelectItem value="no_farm">No Farm Setup</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {isLoading ? (
            <div className="space-y-3">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="h-16 bg-gray-100 rounded animate-pulse"></div>
              ))}
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Grower</TableHead>
                  <TableHead>Farm</TableHead>
                  <TableHead>Location</TableHead>
                  <TableHead>Listings</TableHead>
                  <TableHead>Revenue</TableHead>
                  <TableHead>Rating</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredGrowers?.map((grower) => (
                  <TableRow key={grower.id}>
                    <TableCell>
                      <div>
                        <div className="font-medium">
                          {grower.firstName} {grower.lastName}
                        </div>
                        <div className="text-sm text-muted-foreground">
                          {grower.email}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          Joined {new Date(grower.createdAt).toLocaleDateString()}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell>
                      {grower.farm ? (
                        <div>
                          <div className="font-medium">{grower.farm.name}</div>
                          <div className="flex gap-1 mt-1">
                            {grower.farm.isOrganic && (
                              <Badge variant="outline" className="text-green-600 text-xs">
                                Organic
                              </Badge>
                            )}
                          </div>
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">No farm setup</span>
                      )}
                    </TableCell>
                    <TableCell>
                      {grower.farm ? (
                        <div className="flex items-center gap-1">
                          <MapPin className="h-3 w-3 text-muted-foreground" />
                          <span>{grower.farm.city}, {grower.farm.state}</span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground">-</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="font-medium">
                        {grower.farm?.listingsCount || 0}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        active listings
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="font-medium">
                        ${(grower.farm?.totalRevenue || 0).toFixed(2)}
                      </div>
                    </TableCell>
                    <TableCell>
                      {grower.farm?.rating ? (
                        <div className="flex items-center gap-1">
                          <Star className="h-3 w-3 fill-yellow-400 text-yellow-400" />
                          <span className="font-medium">{parseFloat(grower.farm.rating).toFixed(1)}</span>
                          <span className="text-xs text-muted-foreground">
                            ({grower.farm.reviewCount})
                          </span>
                        </div>
                      ) : (
                        <span className="text-muted-foreground text-sm">No reviews</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <Badge variant={grower.isActive ? "default" : "secondary"}>
                        {grower.isActive ? "Active" : "Inactive"}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Button variant="ghost" size="sm">
                        View Profile
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>
    </div>
  );
}